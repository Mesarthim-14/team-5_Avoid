//=============================================================================CBossHp
//
// ボスのHPクラス [boss_hp.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "manager.h"
#include "renderer.h"
#include "game.h"
#include "boss_hp.h"
#include "texture.h"
#include "resource_manager.h"
#include "boss_hp_back.h"
#include "boss_hp_bar.h"

//=============================================================================
// マクロ定義
//=============================================================================
constexpr int SUB_NUM = 1;

//=============================================================================
// コンストラクタ
//=============================================================================
CBossHp::CBossHp(PRIORITY priority): CScene(priority)
{
    m_pBack = nullptr;
    m_pBar = nullptr;
    m_bDraw = false;
}

//=============================================================================
// デストラクタ
//=============================================================================
CBossHp::~CBossHp()
{
}

//=============================================================================
// インスタンス生成
//=============================================================================
CBossHp * CBossHp::Create(const int& nLife)
{
    // メモリ確保
    CBossHp *pPolygon = new CBossHp(PRIORITY_UI);

    // !nullcheck
    if (pPolygon)
    {
        // 初期化処理
        pPolygon->Init(nLife);
        return pPolygon;
    }

    return nullptr;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CBossHp::Init(const int & nLife)
{
    if (!m_pBack)
    {
        m_pBack = CBossHpBack::Create();
    }
    if (!m_pBar)
    {
        m_pBar = CBossHpBar::Create(nLife);
    }

    return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CBossHp::Uninit()
{
    UNINIT_SAFE(m_pBack);
    UNINIT_SAFE(m_pBar);
}

//=============================================================================
// 更新処理
//=============================================================================
void CBossHp::Update()
{

}

//=============================================================================
// 描画処理
//=============================================================================
void CBossHp::Draw()
{
    if (m_bDraw)
    {
        if (m_pBar)
        {
            m_pBar->Render();
        }
        if (m_pBack)
        {
            m_pBack->Render();
        }

    }
}

//=============================================================================
// HPの減算
//=============================================================================
void CBossHp::SubHp()
{
    if (m_pBar)
    {
        m_pBar->SubHp(SUB_NUM);
    }
}
