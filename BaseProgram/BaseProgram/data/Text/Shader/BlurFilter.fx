//=============================================================================
//
// ブラー [BlurFilter.fx]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// グローバル変数宣言
//=============================================================================
float m_TU;   //TU方向の隣のテクセル位置
float m_TV;   //UV方向の隣のテクセル位置

//=============================================================================
// テクスチャ情報
//=============================================================================
sampler s0 : register(s0);  //ブラーをかける元となるテクスチャー

//=============================================================================
// 構造体
//=============================================================================
struct VS_OUTPUT
{
	float4 Pos : POSITION;
	float2 Tex : TEXCOORD0;
};

//=============================================================================
// 頂点シェーダ
//=============================================================================
VS_OUTPUT VS(float4 Pos : POSITION, float2 Tex : TEXCOORD0)
{
	VS_OUTPUT Out;
	
	Out.Pos = Pos; // 行列変換しないのでそのままピクセルシェーダーに渡す
	Out.Tex = Tex;
	
	return Out;
}

//=============================================================================
// ピクセルシェーダ
//=============================================================================
float4 PS(VS_OUTPUT In) : COLOR0
{
	//テクセルを取得
	float2 Texel0 = In.Tex + float2(-m_TU, 0.0f);
	float2 Texel1 = In.Tex + float2(+m_TU, 0.0f);
	float2 Texel2 = In.Tex + float2(0.0f, +m_TV);
	float2 Texel3 = In.Tex + float2(0.0f, -m_TV);
	
	float2 Texel4 = In.Tex + float2( -m_TU, -m_TV );
	float2 Texel5 = In.Tex + float2( +m_TU, -m_TV );
	float2 Texel6 = In.Tex + float2( -m_TU, +m_TV );
	float2 Texel7 = In.Tex + float2( +m_TU, +m_TV );
	
	//取得したテクセル位置のカラー情報を取得する。
	//それぞれのカラー値にウェイトをかけている。このウェイト値はすべての合計が 1.0f になるように調整する。
	float4 p0 = tex2D(s0, In.Tex) * 0.2f;
	
	float4 p1 = tex2D(s0, Texel0) * 0.1f;
	float4 p2 = tex2D(s0, Texel1) * 0.1f;
	float4 p3 = tex2D(s0, Texel2) * 0.1f;
	float4 p4 = tex2D(s0, Texel3) * 0.1f;
	
	float4 p5 = tex2D(s0, Texel4) * 0.1f;
	float4 p6 = tex2D(s0, Texel5) * 0.1f;
	float4 p7 = tex2D(s0, Texel6) * 0.1f;
	float4 p8 = tex2D(s0, Texel7) * 0.1f;
	
	//カラーを合成する
	return p0 + p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8;
}

//=============================================================================
// テクニック
//=============================================================================
technique TShader
{
	pass P0
	{
		VertexShader = compile vs_1_1 VS();
		PixelShader  = compile ps_2_0 PS();
	}
}