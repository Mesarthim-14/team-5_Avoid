//=============================================================================
//
// 水面反射のシェーダ [Reflect.fx]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// グローバル変数宣言
//=============================================================================
float4x4 m_WVPP;                 //ワールド行列 × ビュー × 遠近射影行列
float4x4 m_W;                    //ワールド行列のみ
float4 m_LightDir;
float4 m_Ambient;
float  m_Height;

// オブジェクトのテクスチャー
sampler tex0 : register(s0);

//=============================================================================
// 構造体
//=============================================================================
struct VS_OUTPUT
{
	float4 Pos : POSITION;		// 自身
	float4 Col : COLOR0;		// 色
	float2 Tex : TEXCOORD0;		// テクスチャ座標
	float4 WPos : TEXCOORD1;	// ワールド座標
};

//=============================================================================
// 頂点シェーダ
//=============================================================================
VS_OUTPUT VS(float4 Pos : POSITION, float4 Normal: NORMAL, float2 Tex : TEXCOORD0)
{
	VS_OUTPUT Out;
	
	Out.Pos = mul( Pos, m_WVPP );	// ワールド変換
	Out.Tex = Tex;					// テクスチャ座標
	
	float3 Light = -m_LightDir.xyz;					// ライトの反転
	float3 NorLight = normalize(Normal.xyz);		// 正規化
	Out.Col = max(m_Ambient, dot(NorLight, Light));	// 色の設定
	Out.WPos = mul( Pos, m_W );						// ワールド行列のみ
	
	return Out;
}

//=============================================================================
// ピクセルシェーダ
//=============================================================================
float4 PS( VS_OUTPUT In ) : COLOR0
{
	// 変数宣言
	float4 Color;
	
	// 反射イメージのワールド座標形状での頂点の Y 座標がm_Height変数より高いとき描画しないようにする
	// これにより水面下のイメージのみレンダリングする
	clip( m_Height - In.WPos.y );	// clip(x) xが0以下になったらピクセルを破棄
	
	// 色情報をRGBに格納する
	Color.rgb = tex2D( tex0, In.Tex ).rgb * In.Col.rgb;
	Color.a = 1.0f;
	   
	return Color;
}

//=============================================================================
// テクニック
//=============================================================================
technique TShader
{
	pass P0
	{
		VertexShader = compile vs_1_1 VS();
		PixelShader = compile ps_2_0 PS();
	}
}