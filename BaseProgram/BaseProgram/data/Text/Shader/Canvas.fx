//=============================================================================
//
// 線画シェーダ [Canvas.fx]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// テクスチャ情報
//=============================================================================
sampler tex0 : register(s0);	// オブジェクトのテクスチャー
sampler tex1 : register(s1);	// 拡散反射率のテクスチャー
sampler tex2 : register(s2);	// 線画書き込み用のテクスチャー

//=============================================================================
// 構造体
//=============================================================================
struct VS_OUTPUT
{
	float4 Pos : POSITION;
	float2 Tex : TEXCOORD0;
};

//=============================================================================
// 頂点シェーダ
//=============================================================================
VS_OUTPUT VS(float4 Pos : POSITION, float4 Col : COLOR0, float2 Tex : TEXCOORD0)
{
	VS_OUTPUT Out;
	
	Out.Pos = Pos;
	Out.Tex = Tex;
	
	return Out;
}

//=============================================================================
// ピクセルシェーダ
//=============================================================================
float4 PS(VS_OUTPUT In) : COLOR0
{
	float4 Col = 0.0f;
	
	//シーンの拡散反射率を取得
	float Material = tex2D(tex1, In.Tex).r;
	
	//取得した拡散反射率を調整する
	//線のかかり具合を小さくするために 0.5f 加算する
	Material = clamp((Material + 0.5f), 0.0f, 1.0f);
	
	//線の色を計算する。
	float LineColor = (1.0f - Material) * tex2D(tex2, In.Tex*3);
    LineColor *= 0.1f;
	//最終的なカラー情報を計算する
	//線だけでは弱いのでMaterialを積算して若干陰をつけている
	Col = tex2D(tex0, In.Tex) * Material - LineColor;

//	Col.a = 1.0f;
	return Col;
}

//=============================================================================
// テクニック
//=============================================================================
technique TShader
{
	pass P0
	{
		VertexShader = compile vs_1_1 VS();
		PixelShader = compile ps_2_0 PS();
	}
}