//=============================================================================
//
// NPCのテキストクラス [npc_text.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "npc_text.h"
#include "renderer.h"
#include "manager.h"
#include "resource_manager.h"
#include "library.h"
#include "game.h"
#include "sound.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define SOUND_INTER (60)    // 感覚

//=============================================================================
// コンストラクタ
//=============================================================================
CNpcText::CNpcText(PRIORITY priority):CScene(priority)
{
    m_nCounter = SOUND_INTER;
}

//=============================================================================
// デストラクタ
//=============================================================================
CNpcText::~CNpcText()
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CNpcText::Init()
{

    return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CNpcText::Uninit()
{
    //オブジェクトの破棄
    Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CNpcText::Update()
{
    // サウンド再生の式
    function<void(const int&, int&)> SetSound = [](const int& nLimit, int& nCounter)
    {
        nCounter++;
        if (nLimit <= nCounter)
        {
            CLibrary::SetSound(CSound::SOUND_SE_TEXT);
            nCounter = 0;
        }
    };

    SetSound(SOUND_INTER, m_nCounter);
}