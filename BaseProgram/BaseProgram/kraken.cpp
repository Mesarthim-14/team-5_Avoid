//=============================================================================
//
// クラーケンクラス [kraken.cpp]
// Author : Konishi Yuuto
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "kraken.h"
#include "animation_skinmesh.h"
#include "skinmesh_model.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CKraken::CKraken(PRIORITY Priority) : CEnemy(Priority)
{
	m_pSkinmeshModel = nullptr;
}

//=============================================================================
// デストラクタ
//=============================================================================
CKraken::~CKraken()
{
}

//=============================================================================
// インスタンス生成
//=============================================================================
CKraken * CKraken::Create()
{
	CKraken *pKraken = new CKraken;
	if (pKraken)
	{
		pKraken->Init();
		return pKraken;
	}

	return nullptr;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CKraken::Init()
{
	CEnemy::Init();

	// モデルの生成
	CreateModel();

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CKraken::Uninit()
{
	if (m_pSkinmeshModel)
	{
		m_pSkinmeshModel->Uninit();
		m_pSkinmeshModel = nullptr;
	}

	CEnemy::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CKraken::Update()
{
	CEnemy::Update();
}

void CKraken::Attack()
{
}

//=============================================================================
// モデルの生成
//=============================================================================
void CKraken::CreateModel()
{
	m_pSkinmeshModel = CSkinmeshModel::Create(GetPos(), GetRot(), CSkinmeshModel::MODEL_ENEMY_KRAKEN);

	// モデルの情報…分からない
	m_pSkinmeshModel->GetHLcontroller()->ChangeAnimation(0);
	m_pSkinmeshModel->GetHLcontroller()->SetLoopTime(0, 60);
	m_pSkinmeshModel->GetHLcontroller()->SetShiftTime(0, 60);

}